name: Merge CI

on:
  push:
    branches: [ main, "1.1" ]

jobs:
  package-and-upload:
    name: Package Go binary and upload to S3
    # runs-on: ubuntu-24.04 # we don't want to rely directly on 'ubuntu-latest'
    runs-on: ubuntu-24.04-arm # we don't want to rely directly on 'ubuntu-latest'
    permissions:
      id-token: write
      contents: read
    env:
      ARTIFACT_BUCKET_NAME: ${{ vars.ARTIFACT_BUCKET_NAME || secrets.ARTIFACT_BUCKET_NAME }}
      WRITER_ROLE_ARN: ${{ vars.WRITER_ROLE_ARN || secrets.WRITER_ROLE_ARN }}
      AWS_REGION: ${{ vars.AWS_REGION || secrets.AWS_REGION }}
      ARTIFACT_PREFIX: concurrency-eval-go
    outputs:
      code_s3_key: ${{ steps.upload.outputs.code_s3_key }}
      code_s3_version: ${{ steps.upload.outputs.code_s3_version }}
    steps:
      - name: Validate required configuration
        shell: bash
        run: |
          set -euo pipefail
          : "${ARTIFACT_BUCKET_NAME?Define ARTIFACT_BUCKET_NAME as a Repository/Environment variable or Secret}"
          : "${WRITER_ROLE_ARN?Define WRITER_ROLE_ARN as a Repository/Environment variable or Secret}"
          : "${AWS_REGION?Define AWS_REGION as a Repository/Environment variable or Secret}"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
          cache: true

      - name: Build Linux/arm64 bootstrap and zip
        run: |
          set -euxo pipefail
          mkdir -p build
          pushd cmd/lambda
          # Build for Linux/arm64 with AWS Lambda norpc tag, outputting 'bootstrap'
          GOOS=linux GOARCH=arm64 go build -tags lambda.norpc -o bootstrap main.go
          # Ensure zip is available (Ubuntu runners usually have it, but install if missing)
          if ! command -v zip >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y zip
          fi
          # Zip as function.zip containing only the bootstrap file
          zip -q function.zip bootstrap
          popd
          mv cmd/lambda/function.zip build/function.zip

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.WRITER_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-artifact-upload

      - id: upload
        name: Upload artifact to S3 (capture versioned key)
        env:
          BUCKET: ${{ env.ARTIFACT_BUCKET_NAME }}
          PREFIX: ${{ env.ARTIFACT_PREFIX }}
        run: |
          set -euxo pipefail
          ZIP_NAME="function.zip"
          FUNC_KEY="${PREFIX}/${ZIP_NAME}"
          FUNC_VERSION_ID=$(aws s3api put-object --bucket "$BUCKET" --key "$FUNC_KEY" --body build/${ZIP_NAME} --query 'VersionId' --output text)
          echo "code_s3_key=${FUNC_KEY}" >> "$GITHUB_OUTPUT"
          echo "code_s3_version=${FUNC_VERSION_ID}" >> "$GITHUB_OUTPUT"

      - name: Summary
        run: |
          echo "Artifact uploaded:" >> $GITHUB_STEP_SUMMARY
          echo "- code_s3_key=\"${{ steps.upload.outputs.code_s3_key }}\"" >> $GITHUB_STEP_SUMMARY
          echo "- code_s3_version=\"${{ steps.upload.outputs.code_s3_version }}\"" >> $GITHUB_STEP_SUMMARY
